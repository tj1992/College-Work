#!/bin/bash
#spellathon : a spellathon solver

# /usr/share/dict/words is the dictionary present in every unix system;
dict=/usr/share/dict/words

# Two arguments are required : key-letter and all-letters. Both should be alphabet letters.
key=`echo $1 | egrep '^[[:alpha:]]$'`
letters=`echo $2 | egrep '^[[:alpha:]]+$'`
if [ -z "$key" -o -z "$letters" ]; then
	echo "Usage: spellathon <KEY-LETTER> <ALL-LETTERS>"
else
# `delstr' will be passed to egrep for removing multiple occurrences ( other than specified )
# e.g. $delstr='a.*a|b.*b|c.*c' for $letters=abc
# egrep -v 'x.*x|y.*y' implies more than 1 occurrences of x or y in individual pattern will not be displayed. This can be used to prevent multi-occurrences in our case as well.
	delstr=`echo $key $letters | 
	awk '
	{
# get the individual letters from $letters and store as associative array *chars*
		for (i=1; i <= length($2); ++i)
# substr($2, i, 1) returns the i(th) letter
			chars[substr($2, i, 1)]++
	}
# Format the output (delstr)
	END { 
		count = 0
		for (i in chars)
		{
			printf "%c.*%c",i,i	# e.g. a.*a
# chars[i] >= 2 implies more than 1 occurrences of i are desired, the 'delstr' should be adjusted according to it
			if (chars[i] >= 2)
			{
				for (j = chars[i]-1; j > 0; --j)
					printf ".*%c",i		# e.g. a.*a.*a ... until j > 0
			}
			++count
			if (count <= length(chars)-1)
				printf "|"			# do not append "|" when there are no letters to be added
		}
	}'`
# Leave the rest of the job to the grep family :
	egrep '^['$letters']*'$key'['$letters']*$' $dict | grep '.....*' | egrep -v $delstr | awk '{ i++; print $0 } END { printf "\tTotal : %d\n", i }'
#                                                                  ^ : only words longer than four or more letters are required
fi
# EOF spellathon
